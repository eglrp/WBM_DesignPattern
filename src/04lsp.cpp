#include <iostream>
#include <string>
#include <vector>
#include <list>

using namespace std;

// Liskov Substitution Principle.

// 任何基类可以出现的地方，子类一定可以出现。LSP是继承复用的基石，只有当子类可以替换基类，软件单位的功能不受影响时，
// 基类才能真正的被复用，而子类也可以在基类的基础上增加新的行为。

// 继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，
// 虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。

// 继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，
// 程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，
// 并且父类修改后，所有涉及到子类的功能都有可能会产生故障。

int main04() {

  return 0;
}